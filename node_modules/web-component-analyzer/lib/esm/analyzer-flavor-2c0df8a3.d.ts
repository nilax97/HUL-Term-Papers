import { Node } from "typescript";
import { AnalyzerVisitContext } from "./analyzer-visit-context-2c0df8a3";
import { ComponentDeclaration } from "./component-declaration-f9a1dfdf";
import { ComponentDefinition } from "./component-definition-08b1aefc";
import { ComponentCssPart } from "./component-css-part-c0c96ec8";
import { ComponentCssProperty } from "./component-css-property-bf4b003a";
import { ComponentEvent } from "./component-event-8314091f";
import { ComponentFeature } from "./component-feature-cb6a2ade";
import { ComponentMember } from "./component-member-d7983be2";
import { ComponentMethod } from "./component-method-8314091f";
import { ComponentSlot } from "./component-slot-cb6a2ade";
import { InheritanceTreeClause } from "./inheritance-tree-f9a1dfdf";
type PriorityKind = "low" | "medium" | "high";
interface DefinitionNodeResult {
    tagName: string;
    declarationNode: Node;
    identifierNode?: Node;
    tagNameNode?: Node;
    analyzerFlavor?: AnalyzerFlavor;
}
interface ComponentMemberResult {
    priority: PriorityKind;
    member: ComponentMember;
}
interface FeatureVisitReturnTypeMap {
    member: ComponentMemberResult;
    method: ComponentMethod;
    cssproperty: ComponentCssProperty;
    csspart: ComponentCssPart;
    event: ComponentEvent;
    slot: ComponentSlot;
}
interface ComponentFeatureCollection {
    memberResults: ComponentMemberResult[];
    methods: ComponentMethod[];
    events: ComponentEvent[];
    slots: ComponentSlot[];
    cssProperties: ComponentCssProperty[];
    cssParts: ComponentCssPart[];
}
interface AnalyzerDeclarationVisitContext extends AnalyzerVisitContext {
    getDefinition: () => ComponentDefinition;
    getDeclaration: () => ComponentDeclaration;
    declarationNode?: Node;
}
type FeatureDiscoverVisitMap<Context extends AnalyzerVisitContext> = {
    [K in ComponentFeature]: (node: Node, context: Context) => FeatureVisitReturnTypeMap[K][] | undefined;
};
type FeatureRefineVisitMap = {
    [K in ComponentFeature]: (feature: FeatureVisitReturnTypeMap[K], context: AnalyzerVisitContext) => FeatureVisitReturnTypeMap[K] | FeatureVisitReturnTypeMap[K][] | undefined;
};
interface AnalyzerFlavor {
    excludeNode?(node: Node, context: AnalyzerVisitContext): boolean | undefined;
    discoverDefinitions?(node: Node, context: AnalyzerVisitContext): DefinitionNodeResult[] | undefined;
    discoverInheritance?(node: Node, context: AnalyzerVisitContext): InheritanceTreeClause[] | undefined;
    discoverFeatures?: Partial<FeatureDiscoverVisitMap<AnalyzerDeclarationVisitContext>>;
    discoverGlobalFeatures?: Partial<FeatureDiscoverVisitMap<AnalyzerVisitContext>>;
    refineFeature?: Partial<FeatureRefineVisitMap>;
    refineDeclaration?(declaration: ComponentDeclaration, context: AnalyzerDeclarationVisitContext): ComponentDeclaration | undefined;
}
export { PriorityKind, DefinitionNodeResult, ComponentMemberResult, FeatureVisitReturnTypeMap, ComponentFeatureCollection, AnalyzerDeclarationVisitContext, FeatureDiscoverVisitMap, FeatureRefineVisitMap, AnalyzerFlavor };
//# sourceMappingURL=analyzer-flavor-2c0df8a3.d.ts.map