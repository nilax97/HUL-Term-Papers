import * as tsModule from "typescript";
import { Declaration, Identifier, InterfaceDeclaration, Node, PropertyDeclaration, PropertySignature, SetAccessorDeclaration, Symbol, SyntaxKind, TypeChecker } from "typescript";
import { AnalyzerVisitContext } from "./analyzer-visit-context-2c0df8a3";
import { ModifierKind } from "./modifier-kind-d7983be2";
import { VisibilityKind } from "./visibility-kind-8314091f";
interface AstContext {
    ts: typeof tsModule;
    checker: TypeChecker;
}
/**
 * Resolves all relevant declarations of a specific node.
 * @param node
 * @param context
 */
declare function resolveDeclarations(node: Node, context: {
    checker: TypeChecker;
    ts: typeof tsModule;
}): Declaration[];
/**
 * Returns if the symbol has "alias" flag
 * @param symbol
 * @param ts
 */
declare function isAliasSymbol(symbol: Symbol, ts: typeof tsModule): boolean;
/**
 * Returns a set of modifiers on a node
 * @param node
 * @param ts
 */
declare function getModifiersFromNode(node: Node, ts: typeof tsModule): Set<ModifierKind> | undefined;
/**
 * Returns if a number has a flag
 * @param num
 * @param flag
 */
declare function hasFlag(num: number, flag: number): boolean;
/**
 * Returns if a node has a specific modifier.
 * @param node
 * @param modifierKind
 */
declare function hasModifier(node: Node, modifierKind: SyntaxKind): boolean;
/**
 * Returns the visibility of a node
 */
declare function getMemberVisibilityFromNode(node: PropertyDeclaration | PropertySignature | SetAccessorDeclaration | Node, ts: typeof tsModule): VisibilityKind | undefined;
/**
 * Returns all keys and corresponding interface/class declarations for keys in an interface.
 * @param interfaceDeclaration
 * @param context
 */
declare function getInterfaceKeys(interfaceDeclaration: InterfaceDeclaration, context: AstContext): {
    key: string;
    keyNode: Node;
    identifier?: Node;
    declaration: Declaration;
}[];
declare function isPropertyRequired(property: PropertySignature | PropertyDeclaration, checker: TypeChecker): boolean;
/**
 * Find a node recursively walking up the tree using parent nodes.
 * @param node
 * @param test
 */
declare function findParent<T extends Node = Node>(node: Node | undefined, test: (node: Node) => node is T): T | undefined;
/**
 * Find a node recursively walking down the children of the tree. Depth first search.
 * @param node
 * @param test
 */
declare function findChild<T extends Node = Node>(node: Node | undefined, test: (node: Node) => node is T): T | undefined;
/**
 * Find multiple children by walking down the children of the tree. Depth first search.
 * @param node
 * @param test
 * @param emit
 */
declare function findChildren<T extends Node = Node>(node: Node | undefined, test: (node: Node) => node is T, emit: (node: T) => void): void;
/**
 * Returns the language of the node's source file
 * @param node
 */
declare function getNodeSourceFileLang(node: Node): "js" | "ts";
/**
 * Returns if a node is in a declaration file
 * @param node
 */
declare function isNodeInDeclarationFile(node: Node): boolean;
/**
 * Returns the leading comment for a given node
 * @param node
 * @param ts
 */
declare function getLeadingCommentForNode(node: Node, ts: typeof tsModule): string | undefined;
/**
 * Returns if the node is in a module declaration context and has a specific name.
 * @param node
 * @param context
 * @param name
 */
declare function isExtensionInterface(node: Node, context: AnalyzerVisitContext, name: string): node is InterfaceDeclaration;
/**
 * Returns the declaration name of a given node if possible.
 * @param node
 * @param context
 */
declare function getDeclarationName(node: Node, context: AnalyzerVisitContext): string | undefined;
/**
 * Returns the declaration name of a given node if possible.
 * @param node
 * @param context
 */
declare function getDeclarationIdentifier(node: Node, context: AnalyzerVisitContext): Identifier | undefined;
export { AstContext, resolveDeclarations, isAliasSymbol, getModifiersFromNode, hasFlag, hasModifier, getMemberVisibilityFromNode, getInterfaceKeys, isPropertyRequired, findParent, findChild, findChildren, getNodeSourceFileLang, isNodeInDeclarationFile, getLeadingCommentForNode, isExtensionInterface, getDeclarationName, getDeclarationIdentifier };
//# sourceMappingURL=ast-util-b3175ce2.d.ts.map